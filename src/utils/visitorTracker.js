// src/utils/visitorTracker.js

const API_URL = 'https://todo-api-ovrr.onrender.com/api/visitors';

// Cache v·ªã tr√≠ ƒë·ªÉ kh√¥ng g·ªçi API qu√° nhi·ªÅu
let cachedLocation = null;
let lastLocationFetch = 0;
const LOCATION_CACHE_TIME = 3600000; // 1 gi·ªù

// üéØ L·∫•y ho·∫∑c t·∫°o Session ID
function getSessionId() {
  const sessionKey = 'visitor_session_id';
  let sessionId = sessionStorage.getItem(sessionKey);
  
  if (!sessionId) {
    sessionId = `sess_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    sessionStorage.setItem(sessionKey, sessionId);
  }
  
  return sessionId;
}

// üì± Detect device type
function getDeviceType() {
  const ua = navigator.userAgent;
  if (/Mobile|Android|iPhone|iPad|iPod/.test(ua)) {
    return /Tablet|iPad/.test(ua) ? 'tablet' : 'mobile';
  }
  return 'desktop';
}

// üåç L·∫•y th√¥ng tin v·ªã tr√≠ v·ªõi cache v√† fallback
async function getLocationInfo() {
  const now = Date.now();
  
  // Ki·ªÉm tra cache
  if (cachedLocation && (now - lastLocationFetch) < LOCATION_CACHE_TIME) {
    console.log('üìç S·ª≠ d·ª•ng location t·ª´ cache');
    return cachedLocation;
  }

  try {
    // Th·ª≠ d√πng ipapi.co tr∆∞·ªõc
    const response = await fetch('https://ipapi.co/json/', {
      headers: {
        'Accept': 'application/json'
      }
    });

    // N·∫øu g·∫∑p rate limit, skip v√† d√πng default
    if (response.status === 429) {
      console.warn('‚ö†Ô∏è ipapi.co rate limited, d√πng default location');
      cachedLocation = {
        country: 'Vietnam',
        city: 'Unknown',
        ip: 'Hidden'
      };
      lastLocationFetch = now;
      return cachedLocation;
    }

    if (!response.ok) throw new Error(`HTTP ${response.status}`);

    const data = await response.json();
    cachedLocation = {
      country: data.country_name || 'Unknown',
      city: data.city || 'Unknown',
      ip: data.ip || 'Hidden'
    };
    lastLocationFetch = now;
    
    console.log('‚úÖ Location fetched:', cachedLocation);
    return cachedLocation;

  } catch (error) {
    console.warn('‚ö†Ô∏è L·ªói fetch location:', error.message);
    
    // Fallback: D√πng timezone ƒë·ªÉ guess country
    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    const defaultLocation = {
      country: 'Vietnam', // Ho·∫∑c detect t·ª´ timezone
      city: 'Unknown',
      timezone: timezone
    };
    
    cachedLocation = defaultLocation;
    lastLocationFetch = now;
    return defaultLocation;
  }
}

// ‚è±Ô∏è T√≠nh session duration
let sessionStartTime = Date.now();

function getSessionDuration() {
  return Math.floor((Date.now() - sessionStartTime) / 1000); // Gi√¢y
}

// üì§ G·ª≠i visitor tracking - v·ªõi retry logic
export async function trackVisitor(retries = 3) {
  try {
    const locationInfo = await getLocationInfo();
    
    const visitorData = {
      user_agent: navigator.userAgent,
      referer: document.referrer || 'Direct',
      country: locationInfo.country,
      city: locationInfo.city,
      device_type: getDeviceType(),
      page_url: window.location.pathname,
      session_id: getSessionId(),
      visit_duration: getSessionDuration(),
    };

    // Retry logic cho network errors
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(visitorData),
          signal: AbortSignal.timeout(5000) // 5 gi√¢y timeout
        });

        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            console.log('‚úÖ Visitor tracked successfully');
            return data.data;
          }
        } else if (response.status === 429) {
          console.warn('‚ö†Ô∏è Backend rate limited, retry...');
          if (attempt < retries) {
            await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
            continue;
          }
        } else {
          console.warn(`‚ö†Ô∏è Backend error: ${response.status}`);
          return null;
        }
      } catch (error) {
        if (attempt === retries) throw error;
        console.warn(`üîÑ Retry ${attempt}/${retries}...`);
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }

  } catch (error) {
    console.warn('‚ùå L·ªói tracking visitor:', error.message);
    return null;
  }
}

// üîÑ Track visitor khi load page - v·ªõi debounce
let trackingTimer = null;

export function initVisitorTracking() {
  // Track ngay khi app load (debounced)
  if (!trackingTimer) {
    trackingTimer = setTimeout(() => {
      trackVisitor();
      trackingTimer = null;
    }, 500);
  }
  
  // Track l·∫°i m·ªói 10 ph√∫t (thay v√¨ 5 ƒë·ªÉ gi·∫£m request)
  setInterval(() => {
    trackVisitor();
  }, 10 * 60 * 1000);

  // Track tr∆∞·ªõc khi user r·ªùi website
  window.addEventListener('beforeunload', () => {
    trackVisitor();
  });
}

// üìä L·∫•y th·ªëng k√™ visitors - v·ªõi retry
export async function getVisitorStats(retries = 2) {
  try {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const response = await fetch(`${API_URL}/stats/overview`, {
          signal: AbortSignal.timeout(5000)
        });

        if (response.ok) {
          const data = await response.json();
          return data.success ? data.data : null;
        } else if (attempt < retries) {
          await new Promise(resolve => setTimeout(resolve, 1000));
          continue;
        }
      } catch (error) {
        if (attempt === retries) throw error;
      }
    }
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y stats:', error.message);
    return null;
  }
}

// üìã L·∫•y danh s√°ch t·∫•t c·∫£ visitors
export async function getAllVisitors(retries = 2) {
  try {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        const response = await fetch(API_URL, {
          signal: AbortSignal.timeout(5000)
        });

        if (response.ok) {
          const data = await response.json();
          return data.success ? data.data : [];
        } else if (attempt < retries) {
          await new Promise(resolve => setTimeout(resolve, 1000));
          continue;
        }
      } catch (error) {
        if (attempt === retries) throw error;
      }
    }
    return [];
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch visitors:', error.message);
    return [];
  }
}